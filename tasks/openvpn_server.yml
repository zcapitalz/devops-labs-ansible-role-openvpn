---
- name: Install pip
  package:
    name: python3-pip
    state: present
    update_cache: true

- name: Install cryptography pip package
  pip:
    name: cryptography
    executable: pip3
  become: true

- name: Create openvpn directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ openvpn_dir_path }}"
    - "{{ openvpn_log_dir_path }}"
    - "{{ openvpn_client_config_dir_path }}"

- name: Check if OpenVPN certificate already exists
  stat:
    path: "{{ openvpn_server_cert_file_path }}"
  register: cert_stat

- name: Create private key
  block:

  - name: Create OpenVPN private key
    community.crypto.openssl_privatekey:
      path: "{{ openvpn_server_key_file_path }}"
      size: 2048

  - name: Create OpenVPN certificate signing request
    community.crypto.openssl_csr_pipe:
      privatekey_path: "{{ openvpn_server_key_file_path }}"
      common_name: "{{ openvpn_cert_common_name }}"
      organization_name: "{{ openvpn_cert_organization_name }}"
      subject_alt_name:
        - "DNS:{{ inventory_hostname }}"
    register: csr

  - name: Sign OpenVPN certificates
    delegate_to: "{{ openvpn_ca_server_host }}"
    community.crypto.x509_certificate_pipe:
      provider: ownca
      csr_content: "{{ csr.csr }}"
      ownca_path: "{{ openvpn_ca_server_cert_file_path }}"
      ownca_privatekey_path: "{{ openvpn_ca_server_key_file_path }}"
    register: cert

  - name: Write OpenVPN signed certificates to file
    copy:
      content: "{{ cert.certificate }}"
      dest: "{{ openvpn_server_cert_file_path }}"
      mode: '0644'

  when: not cert_stat.stat.exists

- name: Get CA certificate content
  delegate_to: "{{ openvpn_ca_server_host }}"
  slurp:
    src: "{{ openvpn_ca_server_cert_file_path }}"
  register: ca_cert_content

- name: Write CA certificate to file
  copy:
    content: "{{ ca_cert_content.content | b64decode }}"
    dest: "{{ openvpn_openvpn_ca_server_cert_file_path }}"
    mode: '0644'

- name: Get HMAC content
  delegate_to: "{{ openvpn_ca_server_host }}"
  slurp:
    src: "{{ openvpn_ca_server_hmac_file_path }}"
  register: ca_ta_content

- name: Write HMAC file to file
  copy:
    content: "{{ ca_ta_content.content | b64decode }}"
    dest: "{{ openvpn_hmac_file_path }}"
    mode: '0644'

- name: Check Diffie-Hellman parameters file exist
  ansible.builtin.stat:
    path: "{{ openvpn_dh_file_path }}"
  register: dh_file_stat

- name: Create Diffie-Hellman parameters file
  shell:
    chdir: "{{ openvpn_dir_path }}"
    cmd: openssl dhparam -out dhparam.pem 2048
  when: not dh_file_stat.stat.exists

- name: Get CRL
  import_tasks: ./get_crl_from_ca_server.yml

- name: Create OpenSSL config
  template:
    src: ../templates/openssl.cnf.j2
    dest: "{{ openvpn_openssl_config_path }}"

- name: Create OpenVPN config
  template:
    src: ../templates/openvpn.conf.j2
    dest: "{{ openvpn_config_path }}"

- name: Ensure openvpn group exists
  ansible.builtin.group:
    name: openvpn
    system: yes
  become: true

- name: Ensure openvpn user exist
  ansible.builtin.user:
    name: openvpn
    system: yes
    group: openvpn
    create_home: no
    home: /nonexistent
    shell: /usr/sbin/nologin
  become: true

- name: Install openvpn
  package:
    name:
      - openvpn
    state: present
  become: true

- name: Start OpenVPN service
  ansible.builtin.service:
    name: openvpn@server
    state: started